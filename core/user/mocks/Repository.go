// Code generated by mockery v2.29.0. DO NOT EDIT.

package mocks

import (
	context "context"

	entities "github.com/sairahul1526/morphic/entities"
	mock "github.com/stretchr/testify/mock"
)

// Repository is an autogenerated mock type for the Repository type
type Repository struct {
	mock.Mock
}

type Repository_Expecter struct {
	mock *mock.Mock
}

func (_m *Repository) EXPECT() *Repository_Expecter {
	return &Repository_Expecter{mock: &_m.Mock}
}

// Get provides a mock function with given fields: _a0, _a1
func (_m *Repository) Get(_a0 context.Context, _a1 entities.UserFilter) (entities.User, error) {
	ret := _m.Called(_a0, _a1)

	var r0 entities.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, entities.UserFilter) (entities.User, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, entities.UserFilter) entities.User); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Get(0).(entities.User)
	}

	if rf, ok := ret.Get(1).(func(context.Context, entities.UserFilter) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Repository_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type Repository_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 entities.UserFilter
func (_e *Repository_Expecter) Get(_a0 interface{}, _a1 interface{}) *Repository_Get_Call {
	return &Repository_Get_Call{Call: _e.mock.On("Get", _a0, _a1)}
}

func (_c *Repository_Get_Call) Run(run func(_a0 context.Context, _a1 entities.UserFilter)) *Repository_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(entities.UserFilter))
	})
	return _c
}

func (_c *Repository_Get_Call) Return(_a0 entities.User, _a1 error) *Repository_Get_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Repository_Get_Call) RunAndReturn(run func(context.Context, entities.UserFilter) (entities.User, error)) *Repository_Get_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewRepository creates a new instance of Repository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewRepository(t mockConstructorTestingTNewRepository) *Repository {
	mock := &Repository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

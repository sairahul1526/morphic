// Code generated by mockery v2.29.0. DO NOT EDIT.

package mocks

import (
	context "context"

	entities "github.com/sairahul1526/morphic/entities"

	mock "github.com/stretchr/testify/mock"

	sqlx "github.com/jmoiron/sqlx"
)

// Repository is an autogenerated mock type for the Repository type
type Repository struct {
	mock.Mock
}

type Repository_Expecter struct {
	mock *mock.Mock
}

func (_m *Repository) EXPECT() *Repository_Expecter {
	return &Repository_Expecter{mock: &_m.Mock}
}

// Create provides a mock function with given fields: _a0, _a1, _a2
func (_m *Repository) Create(_a0 context.Context, _a1 *sqlx.Tx, _a2 entities.Employee) (entities.Employee, error) {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 entities.Employee
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sqlx.Tx, entities.Employee) (entities.Employee, error)); ok {
		return rf(_a0, _a1, _a2)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sqlx.Tx, entities.Employee) entities.Employee); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Get(0).(entities.Employee)
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sqlx.Tx, entities.Employee) error); ok {
		r1 = rf(_a0, _a1, _a2)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Repository_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type Repository_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *sqlx.Tx
//   - _a2 entities.Employee
func (_e *Repository_Expecter) Create(_a0 interface{}, _a1 interface{}, _a2 interface{}) *Repository_Create_Call {
	return &Repository_Create_Call{Call: _e.mock.On("Create", _a0, _a1, _a2)}
}

func (_c *Repository_Create_Call) Run(run func(_a0 context.Context, _a1 *sqlx.Tx, _a2 entities.Employee)) *Repository_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*sqlx.Tx), args[2].(entities.Employee))
	})
	return _c
}

func (_c *Repository_Create_Call) Return(_a0 entities.Employee, _a1 error) *Repository_Create_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Repository_Create_Call) RunAndReturn(run func(context.Context, *sqlx.Tx, entities.Employee) (entities.Employee, error)) *Repository_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function with given fields: _a0, _a1
func (_m *Repository) Delete(_a0 context.Context, _a1 []string) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, []string) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Repository_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type Repository_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 []string
func (_e *Repository_Expecter) Delete(_a0 interface{}, _a1 interface{}) *Repository_Delete_Call {
	return &Repository_Delete_Call{Call: _e.mock.On("Delete", _a0, _a1)}
}

func (_c *Repository_Delete_Call) Run(run func(_a0 context.Context, _a1 []string)) *Repository_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]string))
	})
	return _c
}

func (_c *Repository_Delete_Call) Return(_a0 error) *Repository_Delete_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Repository_Delete_Call) RunAndReturn(run func(context.Context, []string) error) *Repository_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// GetSummary provides a mock function with given fields: _a0, _a1
func (_m *Repository) GetSummary(_a0 context.Context, _a1 entities.SummaryFilter) (entities.Summary, error) {
	ret := _m.Called(_a0, _a1)

	var r0 entities.Summary
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, entities.SummaryFilter) (entities.Summary, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, entities.SummaryFilter) entities.Summary); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Get(0).(entities.Summary)
	}

	if rf, ok := ret.Get(1).(func(context.Context, entities.SummaryFilter) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Repository_GetSummary_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSummary'
type Repository_GetSummary_Call struct {
	*mock.Call
}

// GetSummary is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 entities.SummaryFilter
func (_e *Repository_Expecter) GetSummary(_a0 interface{}, _a1 interface{}) *Repository_GetSummary_Call {
	return &Repository_GetSummary_Call{Call: _e.mock.On("GetSummary", _a0, _a1)}
}

func (_c *Repository_GetSummary_Call) Run(run func(_a0 context.Context, _a1 entities.SummaryFilter)) *Repository_GetSummary_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(entities.SummaryFilter))
	})
	return _c
}

func (_c *Repository_GetSummary_Call) Return(_a0 entities.Summary, _a1 error) *Repository_GetSummary_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Repository_GetSummary_Call) RunAndReturn(run func(context.Context, entities.SummaryFilter) (entities.Summary, error)) *Repository_GetSummary_Call {
	_c.Call.Return(run)
	return _c
}

// GetSummaryByDepartment provides a mock function with given fields: _a0, _a1
func (_m *Repository) GetSummaryByDepartment(_a0 context.Context, _a1 entities.SummaryFilter) (map[string]entities.Summary, error) {
	ret := _m.Called(_a0, _a1)

	var r0 map[string]entities.Summary
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, entities.SummaryFilter) (map[string]entities.Summary, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, entities.SummaryFilter) map[string]entities.Summary); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]entities.Summary)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, entities.SummaryFilter) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Repository_GetSummaryByDepartment_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSummaryByDepartment'
type Repository_GetSummaryByDepartment_Call struct {
	*mock.Call
}

// GetSummaryByDepartment is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 entities.SummaryFilter
func (_e *Repository_Expecter) GetSummaryByDepartment(_a0 interface{}, _a1 interface{}) *Repository_GetSummaryByDepartment_Call {
	return &Repository_GetSummaryByDepartment_Call{Call: _e.mock.On("GetSummaryByDepartment", _a0, _a1)}
}

func (_c *Repository_GetSummaryByDepartment_Call) Run(run func(_a0 context.Context, _a1 entities.SummaryFilter)) *Repository_GetSummaryByDepartment_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(entities.SummaryFilter))
	})
	return _c
}

func (_c *Repository_GetSummaryByDepartment_Call) Return(_a0 map[string]entities.Summary, _a1 error) *Repository_GetSummaryByDepartment_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Repository_GetSummaryByDepartment_Call) RunAndReturn(run func(context.Context, entities.SummaryFilter) (map[string]entities.Summary, error)) *Repository_GetSummaryByDepartment_Call {
	_c.Call.Return(run)
	return _c
}

// GetSummaryByDepartmentAndSubDepartment provides a mock function with given fields: _a0, _a1
func (_m *Repository) GetSummaryByDepartmentAndSubDepartment(_a0 context.Context, _a1 entities.SummaryFilter) (map[string]map[string]entities.Summary, error) {
	ret := _m.Called(_a0, _a1)

	var r0 map[string]map[string]entities.Summary
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, entities.SummaryFilter) (map[string]map[string]entities.Summary, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, entities.SummaryFilter) map[string]map[string]entities.Summary); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]map[string]entities.Summary)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, entities.SummaryFilter) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Repository_GetSummaryByDepartmentAndSubDepartment_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSummaryByDepartmentAndSubDepartment'
type Repository_GetSummaryByDepartmentAndSubDepartment_Call struct {
	*mock.Call
}

// GetSummaryByDepartmentAndSubDepartment is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 entities.SummaryFilter
func (_e *Repository_Expecter) GetSummaryByDepartmentAndSubDepartment(_a0 interface{}, _a1 interface{}) *Repository_GetSummaryByDepartmentAndSubDepartment_Call {
	return &Repository_GetSummaryByDepartmentAndSubDepartment_Call{Call: _e.mock.On("GetSummaryByDepartmentAndSubDepartment", _a0, _a1)}
}

func (_c *Repository_GetSummaryByDepartmentAndSubDepartment_Call) Run(run func(_a0 context.Context, _a1 entities.SummaryFilter)) *Repository_GetSummaryByDepartmentAndSubDepartment_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(entities.SummaryFilter))
	})
	return _c
}

func (_c *Repository_GetSummaryByDepartmentAndSubDepartment_Call) Return(_a0 map[string]map[string]entities.Summary, _a1 error) *Repository_GetSummaryByDepartmentAndSubDepartment_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Repository_GetSummaryByDepartmentAndSubDepartment_Call) RunAndReturn(run func(context.Context, entities.SummaryFilter) (map[string]map[string]entities.Summary, error)) *Repository_GetSummaryByDepartmentAndSubDepartment_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewRepository creates a new instance of Repository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewRepository(t mockConstructorTestingTNewRepository) *Repository {
	mock := &Repository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// Code generated by mockery v2.29.0. DO NOT EDIT.

package mocks

import (
	context "context"

	entities "github.com/sairahul1526/morphic/entities"
	errors "github.com/sairahul1526/morphic/pkg/errors"

	mock "github.com/stretchr/testify/mock"
)

// UserService is an autogenerated mock type for the UserService type
type UserService struct {
	mock.Mock
}

type UserService_Expecter struct {
	mock *mock.Mock
}

func (_m *UserService) EXPECT() *UserService_Expecter {
	return &UserService_Expecter{mock: &_m.Mock}
}

// Get provides a mock function with given fields: ctx, filters
func (_m *UserService) Get(ctx context.Context, filters entities.UserFilter) (entities.User, errors.Error) {
	ret := _m.Called(ctx, filters)

	var r0 entities.User
	var r1 errors.Error
	if rf, ok := ret.Get(0).(func(context.Context, entities.UserFilter) (entities.User, errors.Error)); ok {
		return rf(ctx, filters)
	}
	if rf, ok := ret.Get(0).(func(context.Context, entities.UserFilter) entities.User); ok {
		r0 = rf(ctx, filters)
	} else {
		r0 = ret.Get(0).(entities.User)
	}

	if rf, ok := ret.Get(1).(func(context.Context, entities.UserFilter) errors.Error); ok {
		r1 = rf(ctx, filters)
	} else {
		r1 = ret.Get(1).(errors.Error)
	}

	return r0, r1
}

// UserService_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type UserService_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - ctx context.Context
//   - filters entities.UserFilter
func (_e *UserService_Expecter) Get(ctx interface{}, filters interface{}) *UserService_Get_Call {
	return &UserService_Get_Call{Call: _e.mock.On("Get", ctx, filters)}
}

func (_c *UserService_Get_Call) Run(run func(ctx context.Context, filters entities.UserFilter)) *UserService_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(entities.UserFilter))
	})
	return _c
}

func (_c *UserService_Get_Call) Return(_a0 entities.User, _a1 errors.Error) *UserService_Get_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *UserService_Get_Call) RunAndReturn(run func(context.Context, entities.UserFilter) (entities.User, errors.Error)) *UserService_Get_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewUserService interface {
	mock.TestingT
	Cleanup(func())
}

// NewUserService creates a new instance of UserService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewUserService(t mockConstructorTestingTNewUserService) *UserService {
	mock := &UserService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

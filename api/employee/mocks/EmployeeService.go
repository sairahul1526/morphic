// Code generated by mockery v2.29.0. DO NOT EDIT.

package mocks

import (
	context "context"

	entities "github.com/sairahul1526/morphic/entities"

	errors "github.com/sairahul1526/morphic/pkg/errors"

	mock "github.com/stretchr/testify/mock"
)

// EmployeeService is an autogenerated mock type for the EmployeeService type
type EmployeeService struct {
	mock.Mock
}

type EmployeeService_Expecter struct {
	mock *mock.Mock
}

func (_m *EmployeeService) EXPECT() *EmployeeService_Expecter {
	return &EmployeeService_Expecter{mock: &_m.Mock}
}

// Create provides a mock function with given fields: ctx, _a1
func (_m *EmployeeService) Create(ctx context.Context, _a1 entities.Employee) (entities.Employee, errors.Error) {
	ret := _m.Called(ctx, _a1)

	var r0 entities.Employee
	var r1 errors.Error
	if rf, ok := ret.Get(0).(func(context.Context, entities.Employee) (entities.Employee, errors.Error)); ok {
		return rf(ctx, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, entities.Employee) entities.Employee); ok {
		r0 = rf(ctx, _a1)
	} else {
		r0 = ret.Get(0).(entities.Employee)
	}

	if rf, ok := ret.Get(1).(func(context.Context, entities.Employee) errors.Error); ok {
		r1 = rf(ctx, _a1)
	} else {
		r1 = ret.Get(1).(errors.Error)
	}

	return r0, r1
}

// EmployeeService_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type EmployeeService_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - _a1 entities.Employee
func (_e *EmployeeService_Expecter) Create(ctx interface{}, _a1 interface{}) *EmployeeService_Create_Call {
	return &EmployeeService_Create_Call{Call: _e.mock.On("Create", ctx, _a1)}
}

func (_c *EmployeeService_Create_Call) Run(run func(ctx context.Context, _a1 entities.Employee)) *EmployeeService_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(entities.Employee))
	})
	return _c
}

func (_c *EmployeeService_Create_Call) Return(_a0 entities.Employee, _a1 errors.Error) *EmployeeService_Create_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *EmployeeService_Create_Call) RunAndReturn(run func(context.Context, entities.Employee) (entities.Employee, errors.Error)) *EmployeeService_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function with given fields: ctx, ids
func (_m *EmployeeService) Delete(ctx context.Context, ids []string) errors.Error {
	ret := _m.Called(ctx, ids)

	var r0 errors.Error
	if rf, ok := ret.Get(0).(func(context.Context, []string) errors.Error); ok {
		r0 = rf(ctx, ids)
	} else {
		r0 = ret.Get(0).(errors.Error)
	}

	return r0
}

// EmployeeService_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type EmployeeService_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - ctx context.Context
//   - ids []string
func (_e *EmployeeService_Expecter) Delete(ctx interface{}, ids interface{}) *EmployeeService_Delete_Call {
	return &EmployeeService_Delete_Call{Call: _e.mock.On("Delete", ctx, ids)}
}

func (_c *EmployeeService_Delete_Call) Run(run func(ctx context.Context, ids []string)) *EmployeeService_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]string))
	})
	return _c
}

func (_c *EmployeeService_Delete_Call) Return(_a0 errors.Error) *EmployeeService_Delete_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *EmployeeService_Delete_Call) RunAndReturn(run func(context.Context, []string) errors.Error) *EmployeeService_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// GetSummary provides a mock function with given fields: ctx, filters
func (_m *EmployeeService) GetSummary(ctx context.Context, filters entities.SummaryFilter) (entities.Summary, errors.Error) {
	ret := _m.Called(ctx, filters)

	var r0 entities.Summary
	var r1 errors.Error
	if rf, ok := ret.Get(0).(func(context.Context, entities.SummaryFilter) (entities.Summary, errors.Error)); ok {
		return rf(ctx, filters)
	}
	if rf, ok := ret.Get(0).(func(context.Context, entities.SummaryFilter) entities.Summary); ok {
		r0 = rf(ctx, filters)
	} else {
		r0 = ret.Get(0).(entities.Summary)
	}

	if rf, ok := ret.Get(1).(func(context.Context, entities.SummaryFilter) errors.Error); ok {
		r1 = rf(ctx, filters)
	} else {
		r1 = ret.Get(1).(errors.Error)
	}

	return r0, r1
}

// EmployeeService_GetSummary_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSummary'
type EmployeeService_GetSummary_Call struct {
	*mock.Call
}

// GetSummary is a helper method to define mock.On call
//   - ctx context.Context
//   - filters entities.SummaryFilter
func (_e *EmployeeService_Expecter) GetSummary(ctx interface{}, filters interface{}) *EmployeeService_GetSummary_Call {
	return &EmployeeService_GetSummary_Call{Call: _e.mock.On("GetSummary", ctx, filters)}
}

func (_c *EmployeeService_GetSummary_Call) Run(run func(ctx context.Context, filters entities.SummaryFilter)) *EmployeeService_GetSummary_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(entities.SummaryFilter))
	})
	return _c
}

func (_c *EmployeeService_GetSummary_Call) Return(_a0 entities.Summary, _a1 errors.Error) *EmployeeService_GetSummary_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *EmployeeService_GetSummary_Call) RunAndReturn(run func(context.Context, entities.SummaryFilter) (entities.Summary, errors.Error)) *EmployeeService_GetSummary_Call {
	_c.Call.Return(run)
	return _c
}

// GetSummaryByDepartment provides a mock function with given fields: ctx, filters
func (_m *EmployeeService) GetSummaryByDepartment(ctx context.Context, filters entities.SummaryFilter) (map[string]entities.Summary, errors.Error) {
	ret := _m.Called(ctx, filters)

	var r0 map[string]entities.Summary
	var r1 errors.Error
	if rf, ok := ret.Get(0).(func(context.Context, entities.SummaryFilter) (map[string]entities.Summary, errors.Error)); ok {
		return rf(ctx, filters)
	}
	if rf, ok := ret.Get(0).(func(context.Context, entities.SummaryFilter) map[string]entities.Summary); ok {
		r0 = rf(ctx, filters)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]entities.Summary)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, entities.SummaryFilter) errors.Error); ok {
		r1 = rf(ctx, filters)
	} else {
		r1 = ret.Get(1).(errors.Error)
	}

	return r0, r1
}

// EmployeeService_GetSummaryByDepartment_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSummaryByDepartment'
type EmployeeService_GetSummaryByDepartment_Call struct {
	*mock.Call
}

// GetSummaryByDepartment is a helper method to define mock.On call
//   - ctx context.Context
//   - filters entities.SummaryFilter
func (_e *EmployeeService_Expecter) GetSummaryByDepartment(ctx interface{}, filters interface{}) *EmployeeService_GetSummaryByDepartment_Call {
	return &EmployeeService_GetSummaryByDepartment_Call{Call: _e.mock.On("GetSummaryByDepartment", ctx, filters)}
}

func (_c *EmployeeService_GetSummaryByDepartment_Call) Run(run func(ctx context.Context, filters entities.SummaryFilter)) *EmployeeService_GetSummaryByDepartment_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(entities.SummaryFilter))
	})
	return _c
}

func (_c *EmployeeService_GetSummaryByDepartment_Call) Return(_a0 map[string]entities.Summary, _a1 errors.Error) *EmployeeService_GetSummaryByDepartment_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *EmployeeService_GetSummaryByDepartment_Call) RunAndReturn(run func(context.Context, entities.SummaryFilter) (map[string]entities.Summary, errors.Error)) *EmployeeService_GetSummaryByDepartment_Call {
	_c.Call.Return(run)
	return _c
}

// GetSummaryByDepartmentAndSubDepartment provides a mock function with given fields: ctx, filters
func (_m *EmployeeService) GetSummaryByDepartmentAndSubDepartment(ctx context.Context, filters entities.SummaryFilter) (map[string]map[string]entities.Summary, errors.Error) {
	ret := _m.Called(ctx, filters)

	var r0 map[string]map[string]entities.Summary
	var r1 errors.Error
	if rf, ok := ret.Get(0).(func(context.Context, entities.SummaryFilter) (map[string]map[string]entities.Summary, errors.Error)); ok {
		return rf(ctx, filters)
	}
	if rf, ok := ret.Get(0).(func(context.Context, entities.SummaryFilter) map[string]map[string]entities.Summary); ok {
		r0 = rf(ctx, filters)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]map[string]entities.Summary)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, entities.SummaryFilter) errors.Error); ok {
		r1 = rf(ctx, filters)
	} else {
		r1 = ret.Get(1).(errors.Error)
	}

	return r0, r1
}

// EmployeeService_GetSummaryByDepartmentAndSubDepartment_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSummaryByDepartmentAndSubDepartment'
type EmployeeService_GetSummaryByDepartmentAndSubDepartment_Call struct {
	*mock.Call
}

// GetSummaryByDepartmentAndSubDepartment is a helper method to define mock.On call
//   - ctx context.Context
//   - filters entities.SummaryFilter
func (_e *EmployeeService_Expecter) GetSummaryByDepartmentAndSubDepartment(ctx interface{}, filters interface{}) *EmployeeService_GetSummaryByDepartmentAndSubDepartment_Call {
	return &EmployeeService_GetSummaryByDepartmentAndSubDepartment_Call{Call: _e.mock.On("GetSummaryByDepartmentAndSubDepartment", ctx, filters)}
}

func (_c *EmployeeService_GetSummaryByDepartmentAndSubDepartment_Call) Run(run func(ctx context.Context, filters entities.SummaryFilter)) *EmployeeService_GetSummaryByDepartmentAndSubDepartment_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(entities.SummaryFilter))
	})
	return _c
}

func (_c *EmployeeService_GetSummaryByDepartmentAndSubDepartment_Call) Return(_a0 map[string]map[string]entities.Summary, _a1 errors.Error) *EmployeeService_GetSummaryByDepartmentAndSubDepartment_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *EmployeeService_GetSummaryByDepartmentAndSubDepartment_Call) RunAndReturn(run func(context.Context, entities.SummaryFilter) (map[string]map[string]entities.Summary, errors.Error)) *EmployeeService_GetSummaryByDepartmentAndSubDepartment_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewEmployeeService interface {
	mock.TestingT
	Cleanup(func())
}

// NewEmployeeService creates a new instance of EmployeeService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewEmployeeService(t mockConstructorTestingTNewEmployeeService) *EmployeeService {
	mock := &EmployeeService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
